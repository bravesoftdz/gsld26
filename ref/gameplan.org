#+title: gsld26 gameplan (theme: minimalism)

* game concept
** pacman style mazes, but no wraparound
** screens connect together like in zelda
** cat/mouse aspect
*** goal is to reach the exit through the maze
**** doesn't have to be a true maze
**** ideally, algorithm doesn't create a lot of dead ends
*** you are a little spaceship trying to evade capture
*** you have thrusters + shield (with some directional abilities)
*** guys chasing you have a tractor beam
*** no guns, just chasing/hiding (they want you alive)
*** ability to use the environment to get advantage???
**** something like the power pill in pac-man?

* colored text/terminal graphics
** NOTE retroterm already supports text output
: cd b4; make rxsdl
** character set / colors
http://en.wikipedia.org/wiki/Code_page_437
http://en.wikipedia.org/wiki/ANSI_escape_code#Colors
** drawing tools:
http://picoe.ca/products/pablodraw/ - modern, uses mono
http://www.syaross.org/thedraw/ - old, needs dosbox
THEDRAW has the advantage of exporting to pascal source code.
** ---------------------------------
** TODO hook up color in retroterm
The underlying support is there but it isn't exposed easily to pascal:
Would prefer to mirror this API:
https://github.com/tangentstorm/xpl/blob/master/code/vt.pas
** TODO crt-like pascal API for retroterm
*** right now we just have retro api (using devices)
*** crt unit: (old-style turbo pascal)
http://www.freepascal.org/docs-html/rtl/crt/index-5.html
main things are the keyboard and mouse
** TODO 256-colors (fansi/xterm)
http://fansi.org/256Colors.aspx


* [0/4] generic game engine (port from [[http://gamesketchlib.org/][gamesketchlib]] / [[http://flixel.org][flixel]])
** TODO ansi/sprite engine
*** TODO make sprites from ansi artwork
Drawing a square ship and copying that to a sprite is probably easier than drawing the same square ship and then drawing it again rotated 90 degrees. We could just save a PNG file from pablodraw but it would be nice to just copy the sprite from the bitmap that retroterm already uses.

** TODO screenflow system (strategy design pattern)
https://github.com/sabren/GameSketchLib/blob/master/source/java/org/gamesketchlib/GsState.java
https://github.com/sabren/GameSketchLib/blob/master/source/java/org/gamesketchlib/_GsGame.java
** TODO keyboard/mouse input
*** again retroterm already handles this but no nice pascal API.
*** worst case can use the plain SDL/ZenGL api
*** would prefer to refactor so it looks like CRT's KeyPressed/Readkey
*** see example implementation here:
https://github.com/tangentstorm/xpl/blob/master/code/kbd.pas


* [0/0] basic gameplay
** model the game as a 2d array (TGrid)
https://github.com/tangentstorm/xpl/blob/master/code/grids.pas
** collision detection with walls
easy, but also can grab from logic here:
https://github.com/sabren/tetraminex/tree/master/src/com/tetraminex/core

* [0/1] screens/levels
** TODO load levels into grid
*** probably just use text files or hard-coded array for starters
** TODO maze generation algorithm
*** worst case: just one maze, like pac-man
*** choose an algorithms (prefer one that doesn't make too many dead ends)
some options:
http://weblog.jamisbuck.org/2011/1/10/maze-generation-prim-s-algorithm
http://weblog.jamisbuck.org/2011/1/3/maze-generation-kruskal-s-algorithm
http://weblog.jamisbuck.org/2010/12/29/maze-generation-eller-s-algorithm
http://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking

